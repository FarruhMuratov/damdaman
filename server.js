const express = require('express');
const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù');
console.log('DATABASE_PUBLIC_URL:', process.env.DATABASE_PUBLIC_URL ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù');
console.log('PORT:', process.env.PORT || '3000 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
console.log('NODE_ENV:', process.env.NODE_ENV || '–Ω–µ –∑–∞–¥–∞–Ω');
console.log('RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT || '–Ω–µ –∑–∞–¥–∞–Ω');
console.log('RAILWAY_PROJECT_NAME:', process.env.RAILWAY_PROJECT_NAME || '–Ω–µ –∑–∞–¥–∞–Ω');
console.log('RAILWAY_SERVICE_NAME:', process.env.RAILWAY_SERVICE_NAME || '–Ω–µ –∑–∞–¥–∞–Ω');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
const DATABASE_URL = process.env.DATABASE_URL || process.env.DATABASE_PUBLIC_URL;

// –ï—Å–ª–∏ DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
if (!DATABASE_URL) {
    console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üîß –†–µ—à–µ–Ω–∏–µ:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–º Railway –ø—Ä–æ–µ–∫—Ç–µ');
    console.log('2. –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ damdaman');
    console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª');
    console.log('');
    console.log('üìä –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('DATABASE_URL:', process.env.DATABASE_URL);
    console.log('DATABASE_PUBLIC_URL:', process.env.DATABASE_PUBLIC_URL);
    console.log('PORT:', process.env.PORT);
    console.log('NODE_ENV:', process.env.NODE_ENV);
    console.log('RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT);
    console.log('RAILWAY_PROJECT_NAME:', process.env.RAILWAY_PROJECT_NAME);
    console.log('RAILWAY_SERVICE_NAME:', process.env.RAILWAY_SERVICE_NAME);
    
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
    app.get('/', (req, res) => {
        res.send(`
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Damdaman Tour Platform - –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</title>
                <script src="https://cdn.tailwindcss.com"></script>
            </head>
            <body class="bg-gray-100 min-h-screen">
                <div class="container mx-auto px-4 py-8">
                    <h1 class="text-3xl font-bold text-center mb-8 text-red-600">
                        üö® –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    </h1>
                    
                    <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6">
                        <h2 class="text-xl font-semibold mb-4 text-red-600">‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                        
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                            <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</p>
                        </div>
                        
                        <h3 class="font-semibold mb-2">üîß –†–µ—à–µ–Ω–∏–µ:</h3>
                        <ol class="list-decimal list-inside space-y-2 mb-4">
                            <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–º Railway –ø—Ä–æ–µ–∫—Ç–µ</li>
                            <li>–î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ damdaman</li>
                            <li>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª</li>
                        </ol>
                        
                        <h3 class="font-semibold mb-2">üìä –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h3>
                        <div class="bg-gray-100 p-3 rounded text-sm">
                            <p><strong>DATABASE_URL:</strong> ${process.env.DATABASE_URL || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</p>
                            <p><strong>DATABASE_PUBLIC_URL:</strong> ${process.env.DATABASE_PUBLIC_URL || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</p>
                            <p><strong>PORT:</strong> ${process.env.PORT || '3000 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}</p>
                            <p><strong>NODE_ENV:</strong> ${process.env.NODE_ENV || '–Ω–µ –∑–∞–¥–∞–Ω'}</p>
                            <p><strong>RAILWAY_ENVIRONMENT:</strong> ${process.env.RAILWAY_ENVIRONMENT || '–Ω–µ –∑–∞–¥–∞–Ω'}</p>
                            <p><strong>RAILWAY_PROJECT_NAME:</strong> ${process.env.RAILWAY_PROJECT_NAME || '–Ω–µ –∑–∞–¥–∞–Ω'}</p>
                            <p><strong>RAILWAY_SERVICE_NAME:</strong> ${process.env.RAILWAY_SERVICE_NAME || '–Ω–µ –∑–∞–¥–∞–Ω'}</p>
                        </div>
                        
                        <h3 class="font-semibold mb-2 mt-4">üöÄ –î–ª—è Railway:</h3>
                        <p class="text-sm text-gray-600 mb-4">
                            –í Railway Dashboard –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–µ—Ä–≤–∏—Å "damdaman" ‚Üí "Variables" 
                            –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º:
                        </p>
                        <div class="bg-gray-100 p-3 rounded text-sm font-mono">
                            postgresql://postgres:oQMszjqJQaeDysjolzVTEzoRUmUanlyo@shuttle.proxy.rlwy.net:36434/railway
                        </div>
                        
                        <h3 class="font-semibold mb-2 mt-4">üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</h3>
                        <p class="text-sm text-gray-600 mb-4">
                            –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
                        </p>
                        <ul class="list-disc list-inside text-sm text-gray-600 mb-4">
                            <li>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ "DATABASE_URL" (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)</li>
                            <li>–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é</li>
                            <li>–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å "damdaman"</li>
                            <li>–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ "production"</li>
                        </ul>
                    </div>
                </div>
            </body>
            </html>
        `);
    });
    
    app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
        console.log(`‚ùå –ù–æ DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`);
    });
    
    return;
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç PostgreSQL
const client = new Client({
    connectionString: DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// Middleware
app.use(express.json());
app.use(express.static('.')); // –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã
app.post('/api/apply-schema', async (req, res) => {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞ Railway...');
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');

        // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
        const schemaPath = path.join(__dirname, 'database', 'apply_schema.sql');
        const schemaSQL = fs.readFileSync(schemaPath, 'utf8');
        
        console.log('üìñ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await client.query(schemaSQL);
        
        console.log('‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
        const result = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        `);
        
        const tables = result.rows.map(row => row.table_name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const categoriesResult = await client.query('SELECT COUNT(*) as count FROM categories');
        const usersResult = await client.query('SELECT COUNT(*) as count FROM users');
        
        res.json({
            success: true,
            message: '–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!',
            tables: tables,
            stats: {
                categories: categoriesResult.rows[0].count,
                users: usersResult.rows[0].count
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.message);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ë–î
app.get('/api/db-status', async (req, res) => {
    try {
        if (!client.connected) {
            await client.connect();
        }
        
        const result = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        `);
        
        res.json({
            connected: true,
            tables: result.rows.map(row => row.table_name)
        });
        
    } catch (error) {
        res.json({
            connected: false,
            error: error.message
        });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Damdaman Tour Platform - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body class="bg-gray-100 min-h-screen">
            <div class="container mx-auto px-4 py-8">
                <h1 class="text-3xl font-bold text-center mb-8 text-blue-600">
                    üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Damdaman Tour Platform
                </h1>
                
                <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6">
                    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                        <p><strong>‚úÖ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</strong></p>
                        <p>–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</p>
                        <p class="text-sm mt-2">–ó–Ω–∞—á–µ–Ω–∏–µ: ${DATABASE_URL.substring(0, 50)}...</p>
                    </div>
                    
                    <h2 class="text-xl font-semibold mb-4">üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
                    <div id="dbStatus" class="mb-6">
                        <p class="text-gray-600">–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</p>
                    </div>
                    
                    <h2 class="text-xl font-semibold mb-4">üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É</h2>
                    <button id="applySchema" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É –ë–î
                    </button>
                    
                    <div id="result" class="mt-4"></div>
                </div>
            </div>
            
            <script>
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
                async function checkDBStatus() {
                    try {
                        const response = await fetch('/api/db-status');
                        const data = await response.json();
                        
                        const statusDiv = document.getElementById('dbStatus');
                        if (data.connected) {
                            statusDiv.innerHTML = \`
                                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                                    ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
                                    <br>–¢–∞–±–ª–∏—Ü: \${data.tables.length}
                                </div>
                            \`;
                        } else {
                            statusDiv.innerHTML = \`
                                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                                    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \${data.error}
                                </div>
                            \`;
                        }
                    } catch (error) {
                        document.getElementById('dbStatus').innerHTML = \`
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                                ‚ùå –û—à–∏–±–∫–∞: \${error.message}
                            </div>
                        \`;
                    }
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É
                async function applySchema() {
                    const button = document.getElementById('applySchema');
                    const resultDiv = document.getElementById('result');
                    
                    button.disabled = true;
                    button.textContent = '–ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É...';
                    resultDiv.innerHTML = '<p class="text-blue-600">‚è≥ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>';
                    
                    try {
                        const response = await fetch('/api/apply-schema', { method: 'POST' });
                        const data = await response.json();
                        
                        if (data.success) {
                            resultDiv.innerHTML = \`
                                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                                    <h3 class="font-bold">‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!</h3>
                                    <p>–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: \${data.tables.join(', ')}</p>
                                    <p>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: \${data.stats.categories}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: \${data.stats.users}</p>
                                </div>
                            \`;
                        } else {
                            resultDiv.innerHTML = \`
                                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                                    <h3 class="font-bold">‚ùå –û—à–∏–±–∫–∞:</h3>
                                    <p>\${data.error}</p>
                                </div>
                            \`;
                        }
                    } catch (error) {
                        resultDiv.innerHTML = \`
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                                <h3 class="font-bold">‚ùå –û—à–∏–±–∫–∞:</h3>
                                <p>\${error.message}</p>
                            </div>
                        \`;
                    } finally {
                        button.disabled = false;
                        button.textContent = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É –ë–î';
                        checkDBStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    }
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                document.addEventListener('DOMContentLoaded', () => {
                    checkDBStatus();
                    document.getElementById('applySchema').addEventListener('click', applySchema);
                });
            </script>
        </body>
        </html>
    `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å –ë–î: http://localhost:${PORT}/api/db-status`);
    console.log(`‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω: ${DATABASE_URL ? '–î–∞' : '–ù–µ—Ç'}`);
    if (DATABASE_URL) {
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${DATABASE_URL.substring(0, 50)}...`);
    }
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    if (client.connected) {
        await client.end();
    }
    process.exit(0);
});
